name: Release Trigger

on:
  push:
    branches:
      - main
    paths:
      - .github/version-manifest.yaml
  workflow_dispatch:
env:
  DEPENDENCY_WORKFLOW: 'parent-release.yaml'

jobs:
  parse-version-manifest:
    runs-on: ubuntu-latest
    outputs: 
      dependencies: ${{ steps.parse_manifest.outputs.dependencies }}
      version: ${{ steps.parse_manifest.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse version manifest
        id: parse_manifest
        run: |
          # Install yq for YAML parsing
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

          manifest_json=$(yq eval '.dependencies[]' .github/version-manifest.yaml -o json)
          echo "manifest_json=$manifest_json"

          dependencies=$(echo $manifest_json | jq -s '[.[] | to_entries[] | {name: .key, repo: .value.repo, version: .value.version}]')
          echo "dependencies=$dependencies"
          echo "$dependencies" | jq .

          dependencies=$(echo $dependencies | tr -d '\n')
          echo "dependencies=$dependencies" >> $GITHUB_OUTPUT
          
          VERSION=$(yq eval '.parent.version' .github/version-manifest.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION"

      - name: Log outputs
        run: |
          echo "Version: ${{ steps.parse_manifest.outputs.version }}"
          echo "Dependencies: ${{ steps.parse_manifest.outputs.dependencies }}"

  tag-dependencies:
    name: Tag Dependencies
    needs: parse-version-manifest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dependency: ${{ fromJson(needs.parse-version-manifest.outputs.dependencies) }}
    
    steps:
      - name: Tag Dependency Repository
        id: tag_dependency
        uses: gntouts/tag-remote-repo-action@v1.0.0
        with:
          repository: ${{ matrix.dependency.repo }}
          tag: ${{ matrix.dependency.version }}
          token: ${{ secrets.MY_GITHUB_TOKEN }}
      - name: Log outputs
        run: |
          echo "Dependency: ${{ matrix.dependency.name }}"
          echo "Repository: ${{ matrix.dependency.repo }}"
          echo "Version: ${{ matrix.dependency.version }}"
          echo "result: ${{steps.tag_dependency.outputs.result}}
          echo "message: ${{steps.tag_dependency.outputs.message}}
          echo "tag: ${{steps.tag_dependency.outputs.tag}}
          echo "commit: ${{steps.tag_dependency.outputs.commit}}

        
  tag-parent:
    runs-on: ubuntu-latest
    needs: [parse-version-manifest, tag-dependencies]
    if: needs.parse-version-manifest.outputs.version != ''
    steps:
      - name: Tag Parent Repository
        uses: gntouts/tag-remote-repo-action@v1.0.0
        id: tag_dependency
        with:
          repository: ${{ github.repository }}
          tag: ${{ needs.parse-version-manifest.outputs.version }}
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          skip_update: true  # Skip update if tag already exists in parent repository
      - name: Log outputs
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Version: ${{ steps.tag_dependency.outputs.tag }}"
          echo "result: ${{steps.tag_dependency.outputs.result}}
          echo "message: ${{steps.tag_dependency.outputs.message}}
          echo "tag: ${{steps.tag_dependency.outputs.tag}}
          echo "commit: ${{steps.tag_dependency.outputs.commit}}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: tag-parent  # Only run after tagging is complete
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: false
        
    - name: Create VERSION file
      run: |
        echo "${GITHUB_REF#refs/tags/}" > VERSION
        cat VERSION
    
    - name: Download dependencies
      run: go mod download
      
    - name: Run unit tests
      run: make test-unit
      
    - name: Run functional tests
      run: make test-functional

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test, parse-version-manifest]  # Only run after tests pass
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: false
    - name: Create VERSION file
      run: echo "${GITHUB_REF#refs/tags/}" > VERSION
    
    - name: Download dependencies
      run: go mod download
      
    - name: Build binaries for all platforms
      run: make build-all
      
    - name: Create initial release
      uses: softprops/action-gh-release@v2
      id: create_release
      with:
        files: |
          dist/*
        body: |
          ## Release ${{needs.parse-version-manifest.outputs.version}}
          
          ### Changes
          - Automated release from tag ${{needs.parse-version-manifest.outputs.version}}
          ```
        draft: true
        prerelease: true
        generate_release_notes: true
        tag_name: ${{needs.parse-version-manifest.outputs.version}}
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{needs.parse-version-manifest.outputs.version}}
        path: dist/
        retention-days: 30

  trigger-depencies-workflows:
    runs-on: ubuntu-latest
    needs: [build, parse-version-manifest]
    if: needs.parse-version-manifest.outputs.dependencies != ''
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        dependency: ${{ fromJson(needs.parse-version-manifest.outputs.dependencies) }}
    steps:      
      - name: Trigger release workflow in dependency repository
        id: trigger-dependency
        uses: the-actions-org/workflow-dispatch@v4
        env:
          RUN_NAME: >-
            Update External Repo ${{ github.repository }}
            [Run ID: ${{ github.run_id }}]
        with:
          workflow: ${{ env.DEPENDENCY_WORKFLOW }}
          ref: ${{ matrix.dependency.version }}
          repo: ${{ matrix.dependency.repo }}
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          run-name: ${{ env.RUN_NAME }}
          inputs: >-
            {
              "run-name": "${{ env.RUN_NAME }}",
              "trigger-id": "${{ github.run_id }}",
              "calling-repo": "${{ github.repository }}",
              "release-tag": "${{needs.parse-version-manifest.outputs.version}}"
            }
          display-workflow-run-url-interval: 10s
          display-workflow-run-url-timeout: 2m
          wait-for-completion-interval: 10s
          wait-for-completion-timeout: 20m
          workflow-logs: json-output
      - name: Record failure
        if: failure()
        run: |
          mkdir -p failures

          echo "{\"name\":\"${{ matrix.dependency.name }}\", \"repo\":\"${{ matrix.dependency.repo }}\", \"version\":\"${{ matrix.dependency.version }}\"}" > failures/${{ matrix.dependency.name }}.txt
          echo "failed=${{ matrix.dependency }}" >> $GITHUB_OUTPUT
      - name: Upload failure info
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-dependency-${{ matrix.dependency.name }}
          path: failures/${{ matrix.dependency.name }}.txt
      - name: Exit on success
        if: success()
        run: exit 0
  
  handle-failures:
    needs: trigger-depencies-workflows
    if: always()
    runs-on: ubuntu-latest
    outputs:
      failed-dependencies: ${{ steps.extract-failed.outputs.failed-dependencies }}
      rerun: ${{ steps.extract-failed.outputs.rerun }}

    steps:
      - name: Download all failure artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: failed-dependency-*
          merge-multiple: true
          path: failures/
          
      - name: Extract failed dependencies
        id: extract-failed
        run: |
          ls -lA failures/
          cat failures/*.txt || echo "No failures found"
          if [ -d "failures" ] && [ "$(ls -A failures/)" ]; then
            # Collect all dependency objects and create proper JSON array
            failed_deps=$(cat failures/*.txt | jq -s -c '.')
            echo "Failed dependencies: $failed_deps"
            failed_deps=$(echo $failed_deps | tr -d '\n')
            echo "failed-dependencies=$failed_deps" >> $GITHUB_OUTPUT
            echo "rerun=\"true\"" >> $GITHUB_OUTPUT
          else
            echo "failed-dependencies=[]" >> $GITHUB_OUTPUT
            echo "rerun=\"false\"" >> $GITHUB_OUTPUT
          fi
      - name: Log outputs
        run: |
          echo "Failed dependencies: ${{ steps.extract-failed.outputs.failed-dependencies }}"

  rerun-failed-dependencies:
    name: Rerun Failed Dependencies
    runs-on: ubuntu-latest
    needs: [handle-failures, parse-version-manifest]
    if: always() && contains(needs.handle-failures.outputs.rerun, 'true')
    strategy:
      fail-fast: false
      matrix:
        dependency: ${{ fromJson(needs.handle-failures.outputs.failed-dependencies) }}
    steps:
      - name: Debug
        run: |
          echo "Rerun trigger: ${{needs.handle-failures.outputs.rerun}}"
          echo "Rerunning failed dependency: ${{ matrix.dependency.name }}"
          echo "Repository: ${{ matrix.dependency.repo }}"
          echo "Version: ${{ matrix.dependency.version }}"
      - name: Tag remote repository
        id: tag_dependency
        uses: gntouts/tag-remote-repo-action@v1.0.0
        with:
          repository: ${{ matrix.dependency.repo }}
          tag: ${{ matrix.dependency.version }}
          token: ${{ secrets.MY_GITHUB_TOKEN }}
      - name: Log outputs
        run: |
          echo "Dependency: ${{ matrix.dependency.name }}"
          echo "Repository: ${{ matrix.dependency.repo }}"
          echo "Version: ${{ matrix.dependency.version }}"
          echo "result: ${{steps.tag_dependency.outputs.result}}
          echo "message: ${{steps.tag_dependency.outputs.message}}
          echo "tag: ${{steps.tag_dependency.outputs.tag}}
          echo "commit: ${{steps.tag_dependency.outputs.commit}}
      - name: Trigger release workflow in failed dependency repository
        id: rerun-dependency
        uses: the-actions-org/workflow-dispatch@v4
        env:
          RUN_NAME: >-
            Rerun Failed Dependency ${{ matrix.dependency.name }}
            [Run ID: ${{ github.run_id }}]
        with:
          workflow: ${{ env.DEPENDENCY_WORKFLOW }}
          ref: ${{ matrix.dependency.version }}
          repo: ${{ matrix.dependency.repo }}
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          run-name: ${{ env.RUN_NAME }}
          inputs: >-
            {
              "run-name": "${{ env.RUN_NAME }}",
              "trigger-id": "${{ github.run_id }}",
              "calling-repo": "${{ github.repository }}",
              "release-tag": "${{needs.parse-version-manifest.outputs.version}}"
            }
          display-workflow-run-url-interval: 10s
          display-workflow-run-url-timeout: 2m
          wait-for-completion-interval: 10s
          wait-for-completion-timeout: 20m
          workflow-logs: json-output